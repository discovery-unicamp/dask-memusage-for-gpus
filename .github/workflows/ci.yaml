---
name: Continuous Test

on:
  push:
    branches:
      - 'main'
      - 'releases'
  pull_request: {}

jobs:
  lint:
    environment: continuous_test
    strategy:
      matrix:
        # Run for Python 3.8 only for now
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          pip install isort flake8 mypy interrogate dask distributed pandas-stubs pandas # Install manually dependencies (TODO: move to poetry)
          echo "## CI/CD Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "-------------------------" >> $GITHUB_STEP_SUMMARY
      - name: Check imports with isort
        run: |
          # Show the diffs for debugging
          isort -c dask_memusage_gpus/
          if [[ $? -ne 0 ]] ; then
              echo "* **isort results:**" >> $GITHUB_STEP_SUMMARY
              echo "```diff" >> $GITHUB_STEP_SUMMARY
              isort -c --df dask_memusage_gpus/ >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
              exit 1
          else
              echo "* **isort results:** :white_check_mark:" >> $GITHUB_STEP_SUMMARY
              exit 0
          fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 dask_memusage_gpus/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 dask_memusage_gpus/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          if [[ $? -ne 0 ]] ; then
              echo "* **flake8 results:**" >> $GITHUB_STEP_SUMMARY
              echo "```python" >> $GITHUB_STEP_SUMMARY
              flake8 dask_memusage_gpus/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
              exit 1
          else
              echo "* **flake8 results:** :white_check_mark:" >> $GITHUB_STEP_SUMMARY
              exit 0
          fi
      - name: Lint with mypy
        run: |
          echo "* **Mypy results:** $(mypy dask_memusage_gpus/)" >> $GITHUB_STEP_SUMMARY
          mypy --install-types --non-interactive
          mypy dask_memusage_gpus/
      - name: Doc lint with interrogate
        run: |
          echo "* **interrogate results:** $(interrogate -i --fail-under=15 dask_memusage_gpus/ | cut -d: -d" " -f4)" >> $GITHUB_STEP_SUMMARY
          # We should have at least 80% of docs covered
          interrogate -vv -i --fail-under=90 -g /tmp/ -e build/ -e tests/

          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          BRANCH=$(git rev-parse --abbrev-ref HEAD)

          git fetch origin badges
          git checkout badges

          if ! cmp -s /tmp/interrogate_badge.svg badges/interrogate_badge.svg; then
              git pull

              cp -rf /tmp/interrogate_badge.svg badges/interrogate_badge.svg

              git add -f badges/interrogate_badge.svg

              git commit -m "Record interrogate badge [$(date +'%Y-%m-%d %H:%M')]"
              git push
          fi

          git checkout $BRANCH

  tests:
    strategy:
      matrix:
        # Run for Python 3.8 only for now
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    environment: continuous_test
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python3 -m pip install pytest pytest-coverage coverage-badge mock parameterized distributed dask pandas pyarrow lxml xlsxwriter openpyxl
      - name: Run test cases
        run: |
          pytest --cov dask_memusage_gpus/ --cov-report xml:xml/coverage.xml tests/
      - name: Generate and update badge
        if: contains(github.ref, 'releases')
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          coverage-badge -o /tmp/coverage.svg

          BRANCH=$(git rev-parse --abbrev-ref HEAD)

          git fetch origin badges
          git checkout badges

          if ! cmp -s /tmp/coverage.svg badges/coverage.svg; then
              git pull

              cp -rf /tmp/coverage.svg badges/coverage.svg

              git add -f badges/coverage.svg

              git commit -m "Record coverage badge [$(date +'%Y-%m-%d %H:%M')]"
              git push
          fi

          git checkout $BRANCH

  deploy:
    runs-on: ubuntu-latest
    environment: pypi_upload
    needs: [tests]
    permissions:
      id-token: write
    if: github.ref == 'refs/heads/releases'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Generate artifacts
        run: |
          # Install twine and poetry
          pip install twine poetry
          poetry config virtualenvs.create false
          poetry build

      - name: Mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: Publish
        # gh-action-pypi-publish uses TWINE_PASSWORD automatically
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
